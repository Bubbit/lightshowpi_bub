# Author: Chris Usey (chris.usey@gmail.com)
#
# This is the configuration file for the program. This file follows conventions of a python config file.
# The variables defined below control variable aspects of the program.
#

[hardware]
# if using a MCP23017 port expander uncomment the following lines and set accordingly
# make sure to add the pin numbers to the gpios_to_use list starting with pin_base
#mcp23017 = {
#	'i2c_addr': 0x20,
#	'pin_base': 65
#	}

# if using a relay that is active low set this value to yes
active_low_mode = no

# gpio pins to use
#gpios_to_use = 7,0,1,2,3,4,5,6,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80
gpios_to_use = 7,0,1,2,3,4,5,6

[light_show_settings]

# PLAYLIST
# The playlist to be used in the lightshow and in SMS voting
playlist_path = $SYNCHRONIZED_LIGHTS_HOME/music/test/.playlist

# The following control the amount of time the lights will ALL come on and all go off
# before a show starts.  It also controlls if the light will turn on then off or vice versa
# For example:
# you can set preshow_lights_on_time = n and preshow_ligts_off_time = t. Doing so will show the lights for "n" 
# seconds, turn them off for "t" seconds and then start the light show, where "n" and "t" are amount of seconds. 
preshow_lights_on_time = 5
preshow_lights_off_time = 5

[audio_processing]
# The following values control the frequencies to which the channels will respond. With min_frequency being the 
# lowest frequency for which a channel will be activated and 1500 being the max frequency 
# for which a channel will be activated.
# Not taking into account the custom_channel_mapping setting, the frequency range will be evenly divided beween
# all the channels defined in gpios_to_use.  custom_channel_mapping can be used to custom map the channels, in effect
# this can programatically allow a user to switch a specific channel of lights to a different frequency without having
# to physically rewire the channels. 
# For example: Imagine we have 8 LED's aligned in a strait row and they are connected to coorespinding pin numbers.
# When the frequencies are mapped without using custom_channel_mapping, or channel mapping defined as 1,2,3,4,5,6,7,8
# the lowest frequency is assigned to pin one, the next highest to pin 2, and so on until the highest 
# value is mapped to the last pin 8 (LED 8). Now say you wanted our THIRD LED to have the lowest frequency, without
# using custom_channel_mapping you would have to phically rewire LED 3 to connect to PIN 3. with custom_channel_mapping
# you simply define custom_channel_mapping = 1,2,1,4,5,6,7,8. Now both LED 1 and LED 3 will activate when the lowest 
# frequency is played. custom_channel_mapping must be the same size as gpios_to_use. If you want to create a 
# mirroring effect for the lights define custom_channel_mapping = 1,2,3,4,4,3,2,1.  With custom channel mapping the 
# program will only calculate and distribute frequencies for the highest channel listed in custom_channel_mapping 
# so in the mirroring example, the program will evenly distribute the frequencies between 4 channels. 
# Simply comment it out if not in use.  
# Note: you will have to delete the song cache and re-play a song to create a new cache that utilizes the settings
# if changed. Also the custom_channel_mapping is not a 0 based list, the first channel is 1.
min_frequency = 20
max_frequency = 15000
custom_channel_mapping = 1,2,3,4,5,6,7,8,8,7,6,5,4,3,2,1

[auto_tuning]
# The following will set the limits values for each channel. Limits are adjusted dynamically during playback.
# the adjustment amounts can also be managed below. The limit list should equal the size of the gpio_to_use list
# above.  If all limits are to be the same simly enter a single value.
limit_list = 5

# The following adjustments control the "Auto Tuning" capability of the program, since the limit list adjusts 
# dynamically during playback, adjusting the following values can make the lights blink more or blink less. 
# The limit is increased by "limit_threshold_increase" whenever the amplitude for a particular channel is 
# more than "limit_threshold".
limit_threshold = 0.725
limit_threshold_increase = 1.35

# The limit is decreased by "limit_threshold_decrease" whenever the lights in that channel have been off 
# for "max_off_cycles" in a row
limit_threshold_decrease = 0.925
max_off_cycles = 10

[sms_settings]

# ADMINS
# Define a list of numbers that can execute admin commands.  Please Note the format of the numbers "+xxxxxxxxxxx:"
admins_list = +1444444444:,+15555555555:

# COMMANDS
# a list of commands that can be texted
request_songs_list_cmd = help
admin_volume_management_cmd = volume

# MESSAGES ETC
# change the messages / etc that are sent to users
# Still to be implemented