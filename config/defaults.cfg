# This is the configuration file for the program. This file follows conventions
# of a python config file. The variables defined below control variable aspects
# of the program.
#
# Author: Chris Usey (chris.usey@gmail.com)
# Author: Todd Giles (todd.giles@gmail.com)
#
# Copy this sample file and rename as 'overrides.cfg' in this directory and then
# modify any and all settings that you need to or would like to.  You can also
# override settings via adding a file '/home/pi/.lights.cfg'.
#
# The order in which settings are loaded / overriden are:
#
#   (1) config/defaults.cfg (i.e. this file)
#   (2) config/overrides.cfg
#   (3) /home/pi/.lights.cfg
#   (4) ~/.lights.cfg (if not same as 3)



[hardware]

# If using a MCP23017 port expander uncomment the following lines and set
# accordingly.  Make sure to add the pin numbers to the gpios_to_use list
# starting with pin_base.
#mcp23017 = {
#  'i2c_addr': 0x20,
#  'pin_base': 65
#}

# If using a relay that is active low, set to 'yes'
active_low_mode = no

# GPIO pins to use for each channel
#
# Using 8 pins of GPIO on the pi as well as 16 pins via  the MCP23017 port
# expander with pin_base = 65:
#gpio_pins = 7,0,1,2,3,4,5,6,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80
#
# Using 8 pins of GPIO on the pi:
gpio_pins = 7,0,1,2,3,4,5,6

# Set the mode the pins should be configured in, namely “pwm” for fading in and
# out based upon the frequency response, or “onoff” for an on off switching
# effect when crossing a median frequency response per channel.
#
# You can configure each pin individually, for example:
#pin_modes = onoff,onoff,pwm,pwm,pwm,onoff,onff
#
# Or you can simply set all pins to the same mode:
pin_modes = pwm 

[lightshow]

# The playlist to be used in the lightshow.  The playlist is a text file with
# a single song per line in the format:
# [songname] <tab> [/full/path/to/song]
playlist_path = $SYNCHRONIZED_LIGHTS_HOME/music/sample/.playlist

# Set the following setting to 'yes' to randomize playback of songs from the
# playlist.  Default is to play the songs in the order listed in the playlist.
randomize_playlist = no

# Control the lights between songs.  You can turn the lights on and off a
# specified number of seconds an arbitrary number of times with the preshow
# setting.  If no preshow is defined, songs will be played one after another
# without any delay.  The syntax is:
#
# preshow = [off|on]:[seconds],[off|on]:[seconds],...
#
# Turn the lights off for 1 second, then on for 30, and then off for 1 second:
#preshow = off:1,on:30,off:1
#
# Turn the lights on for 30 seoncds, then off for 30 seconds:
#preshow = on:30,off:30
#
# Default is to be on for 30 seconds, then off for 1:
preshow = on:30,off:1

# Override channels to be always on, always off, or inverted. inverted channels
# will turn off when music is played, and on otherwise.  These lists are 1
# based (i.e. the first channel starts at 1). Timing values will be cached as
# normal.
#
# Always keep channels 2 and 6 on:
#always_on_channels = 2,6
#
# Always keep channel 5 off:
#always_off_channels = 5
#
# Invert the output for channel 4 and 8:
#invert_channels = 4,8
#
# Default (-1) disables each of these settings
always_on_channels = -1
always_off_channels = -1
invert_channels = -1


[audio_processing]

# Note: you will have to delete the song cache after changing these settings.

# The following values control the frequencies to which the channels will
# respond. With min_frequency being the lowest frequency for which a channel
# will be activated and max_frequency being the max frequency for which a 
# channel will be activated.
#
# The frequency range will be evenly divided beween all the channels defined
# in gpio_pins. 
#
# Note that custom_channel_frequencies overrides these settings.
min_frequency = 20
max_frequency = 15000

# The following setting can be used to custom map the channels, in effect
# this can programatically allow you to switch a specific channel of
# lights to a different frequency without having to physically rewire the
# channels.
#
# For example: Imagine we have 8 channel's output that are connected to
# corresponding gpio_pins. When the frequencies are mapped without using
# custom_channel_mapping, and with a channel mapping defined as:
#custom_channel_mapping = 1,2,3,4,5,6,7,8
# the lowest frequency is assigned to channel 1, the next highest to channel
# 2, and so on until the highest value is mapped to channel 8 (the 8th pin
# defined in gpio_pins).
#
# Now say you wanted your THIRD channel to have the lowest frequency, without
# using custom_channel_mapping you would have to physically rewire channel 3.
# With custom channel mapping you simply define:
#custom_channel_mapping = 1,2,1,4,5,6,7,8
# Now both channel 1 and channel 3 will activated when the lowest frequency is
# played. custom_channel_mapping must be the same size as gpio_pins.
#
# If you want to create a mirroring effect for the lights define:
#custom_channel_mapping = 1,2,3,4,4,3,2,1
# With custom channel mapping the program will only calculate and distribute
# frequencies for the highest channel listed in custom_channel_mapping. So in
# this mirroring example, the program will evenly distribute the frequencies.
#
# The default is to directly map 8 channels
custom_channel_mapping = 1,2,3,4,5,6,7,8

# Defining custom_channel_frequencies overrides the min_frequency and
# max_frequency settings, allowing you to define a custom list of frequencies
# that should be utilized for each channel. The list must be the size of
# (gpio_pins + 1) or if custom_channel_mapping is being used it must be the
# size of the max value + 1 in the custom_channel_mapping list.
#custom_channel_frequencies = 0,156,313,625,1250,2500,5000,10000,15000



[auto_tuning]

# The following will set the limits values for each channel. Limits are
# adjusted dynamically during playback.  the adjustment amounts can also
# be managed below. The limit list should equal the size of the gpio_pins
# list above.  If all limits are to be the same simply enter a single value.
limit_list = 5

# The following adjustments control the "Auto Tuning" capability of the
# program, since the limit list adjusts dynamically during playback, adjusting
# the following values can make the lights blink more or blink less. The limit
# threshold is multiplied by "limit_threshold_increase" whenever the amplitude
# for a particular channel times the "limit_threshold" is greater than the
# current limit.
limit_threshold = 0.80
limit_threshold_increase = 1.1

# The limit is multipled by "limit_threshold_decrease" whenever the lights in
# that channel have been off for "max_off_cycles" in a row.
limit_threshold_decrease = 0.95
max_off_cycles = 20

# Disable auto-tuning, which means each channel will turn on and off solely
# based upon the limits defined above (will require hand tuning per song)
disable = no


[sms]

# All enabled sms commands must be defined here, otherwise they will be
# reported as errors when requested. Note: Each command must be defined in the
# 'py/sms_commands.py' file as a function. See that file for examples.
commands = help,volume,play,vote,list

# Commands can have aliases defined here.  IMPORTANT: Make sure that the
# aliases are defined with the longest aliases first, otherwise the shorter
# alias may win out and pass along part of the longer alias as if it were
# an argument to the command (e.g. vol, v and not v, vol)
#
# TODO(toddgiles): Add auto-aliases based upon best match from all commands
help_aliases = h
volume_aliases = vol, v
play_aliases = p, next, n
list_aliases = l, songs

# Short description of each command (returned in help request).  Leave
# the description blank to not have it returned in help requests.
help_description =
volume_description = vol<level>: vol+, vol-, v95
play_description = play<song#>: play3, p3
vote_description = vote<song#>: vote1, or simply 1
list_description = list: lists all songs

# The default command is the command assumed when the sms message doesn't
# match any given command or command alias.
default_command = vote

# Multiple groups can be defined to fine tune which users can execute
# which actions. For each group defined, you should also define a
# groupname_users to list all users in the group as well as 
# groupname_commands to list all commands the group can perform.
groups = admin,guest,voting

# For each group defined above, include the cell # for each member of
# the group.  A cell # can be in multiple groups. Note the format of the
# numbers: "+xxxxxxxxxxx:".  The special term 'all' can be used to create
# groups that apply to all cell #'s.
admin_users = +11111111111:,+12222222222:
guest_users = +13333333333:
voting_users = all

# Specify which commands each group has access to. Each command must be
# defined in 'commands' above. The special term 'all' includes all defined
# commands.
admin_commands = all
guest_commands = play
voting_commands = help,vote,list

# For each group defined above, throttling of commands can be achevied
# by defining [command]:<command limit> for each command and limit you 
# wish to place a throttle on.  Each command must be defined in 'commands'
# above. The special term 'all' can be used to place an overall throttle on
# group as a whole, and will limit the group to a specific number of commands
# than can be used during 'throttle_time_limit_seconds'. Note that the order in which
# 'groups' above is important (see note for groups above). If a user is defined
# in more than one group, the user will be throttled at the highest group level.
# that they belong to.
throttle_time_limit_seconds = 3200
admin_throttle = all:100
guest_throttle = play:10,vote:60,all:100
voting_throttle = vote:10,all:100

# Add users who are abusing your system to this blacklist, and their commands
# will all be ignored by the application.
blacklist = +14444444444:,+15555555555:

# The response given to an unknown command (i.e. the default command does
# not know how to handle it, and it doesn't match any other commands).
unknown_command_response = Hrm, not sure what you needed, try texting 'help' ...

# The response given to an unauthorized request.
unauthorized_response = Hrm, not sure what you needed, try texting 'help' ...

# The response given when throttle limits have been reached
throttle_limit_reached_response = Thank you, but the system has reached its maximum number of requests for the time being. Please try again in a little while.
